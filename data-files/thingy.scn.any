// -*- c++ -*-
// You can extend this sample scene file format with your own fields.
// Edit the scene parsing in Scene.cpp.
{
    name = "thingy",
   
    models = {
      
       sponza = ArticulatedModel::Specification 
	   {
            filename = "3ds/fantasy/sponza/sponza.3ds",
       },

       thingy = ArticulatedModel::Specification 
	   {
            filename = "thingy.3ds",
            preprocess = ArticulatedModel::Preprocess {
                xform = Matrix4::scale(1, 1, 1),
                materialOverride = Material::Specification {
                    specular = Color3(0.5),
                    shininess = mirror()
                }
            }
       },

	   buddha = ArticulatedModel::Specification
	   {
			filename = "ifs/buddha.ifs",
	   },
       
    },
    
    lighting = Lighting::Specification {
        lightArray = (
		GLight 
		{
			position = Vector4(15, 30, -5.5, 1.0), 
			spotTarget = Vector3(-7, 0, 0), 
			spotHalfAngle = 0.6, 
			color = Power3(200000)
		}),

        environmentMap = {
            constant = 1.0,
            texture = Texture::Specification {
                filename      = "cubemap/whiteroom/whiteroom_*.png",
                desiredFormat = "RGB8",
                dimension     = "DIM_CUBE_MAP",
                settings      = Texture::Settings::cubeMap(),
                preprocess    = Texture::Preprocess::gamma(2.0f)
            }
        },
    },

    
    entities = {
        // Each entity has a name and is an instance of a model.  The instantiation syntax accepts
        // two (optional) arguments: a position spline (which can be a single position), and a 
        // pose spline (which can be a single pose).

		// sides        
		c0 = sponza(CFrame::fromXYZYPRDegrees(0.0,0.0,0.0, 0,0,0)),
		c1 = thingy(CFrame::fromXYZYPRDegrees(0.0,0.0,0.0, 0,0,0)),
		c2 = buddha(CFrame::fromXYZYPRDegrees(-2.5,1.0,0.0, 0,0,0)),
		
    },
    
    camera = GCamera {
        coordinateFrame = CFrame::fromXYZYPRDegrees( -0.0f,   0.6f,   1.8f,  341.1f,  -0.0f,   0.0f),
        
        nearPlaneZ = -0.5,
        farPlaneZ = -50,
        fovDirection = "VERTICAL",
        fovDegrees = 60
    }
   
}
